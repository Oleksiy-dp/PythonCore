Enough to understand the code: 
Assignment uses = and comparison uses ==.
 For numbers + - * / % are as expected.
 Special use of + for string concatenation.
 Logical operators are words (and, or, not) not symbols (&&, ||, !).
 First assignment to a variable will create it.
 Variable types don’t need to be declared.
 Python figures out the variable types on its own.
 
 1. Какие операторы (операции) используются для проведения вычислений в Python?

Язык Python имеет ряд математических (арифметических) операторов для проведения вычислений в арифметических выражениях. Перечень этих операций в порядке убывания приоритета следующий:

    ** – возведение в степень;
    –x – унарный минус;
    /, // – обычное деление, деление с округлением вниз (одинаковый приоритет);
    % – остаток от деления;
    * – умножение;
    – – вычитание;
    + – сложение.


    4. Операция возведения в степень **. Пример

Операция возведения в степень обозначается ** и используется для операндов любых числовых типов (целочисленных, вещественных, комплексных).

# Операция ** - возведение в степень
# 1. Для целых чисел
a = 3
b = 2
c = a**b # c = 9
print("c = ", c)

# 2. Для вещественных чисел
a = 2.5
b = 3
c = a**b # c = 15.625
print('c = ', c)

# 3. Для комплексных чисел
x = 1 - 2j
y = -4j
z = x**y # z = (-0.011895629765035814+0.0009211666704635043j)
print('z = ', z)

# 4. В 16-й системе исчисления
a = 0xA1
b = 0x03
c = a**b # c = 4173281 - результат в 10-й системе исчисления
d = hex(c) # d = 0x3fade1 - результат в 16-й системе исчисления
print('c = ', c)
print('d = ', d)

# 5. В 8-й системе исчисления
a = 0o356
b = 0o2
c = a**b # c = 56644 - результат в 10-й системе исчисления
d = oct(c) # d = 0o156504 - результат в 8-й системе исчисления
print('c = ', c)
print('d = ', d)

# 6. В 2-й системе исчисления
a = 0b101
b = 0b110
c = a**b # c = 15625 - результат в 10-й системе исчисления
d = bin(c) # d = 0b11110100001001 - результат в 2-й с/и
print('c = ', c)
print('d = ', d)

  ⇑
5. Операции сложения (+), вычитания (–). Примеры

Операции сложения + и вычитания – являются бинарными и используются для любого числового типа.

# Операция сложения +, вычитания -
# 1. Сложение, вычитание целых чисел
a=3
b=5
c = a+b #c = 8
d = a-b # d = -2

# 2. Сложение, вычитание целого и вещественного чисел
a = 2.5
b = 7
c = a + b # c = 9.5 - результат - вещественное число
d = a - b # d = -4.5 - результат - вещественное число

# 3. Сложение, вычитание вещественных чисел
x = 8.99902
y = 9.112356
z = x+y # z = 18.111376
v = x-y # v = -0.11333600000000033

# 4. Сложение, вычитание комплексных чисел, результат - комплексное число
a = 7+8j
b = 3-2j
c = a + b # c = (10+6j)
d = a - b # d = (4+10j)

# 5. Сложение, вычитание чисел в шестнадцатеричной системе исчисления
a = 0xFF5
b = 0xC9
c = a + b # c = 4286 - в десятичной системе исчисления
d = a - b # d = 3884

# 6. Сложение, вычитание чисел в восьмеричной системе исчисления
a = 0o730
b = 0o50
c = a + b # c = 512
d = a - b # d = 432

# 7. Сложение, вычитание чисел в двоичной системе исчисления
a = 0b0110110
b = 0b0001010
c = a + b # c = 64 - результат в десятичной системе исчисления
d = a - b # d = 44

  ⇑
6. Операции умножения (*) и обычного деления (/). Пример

Операции умножения * и деления / есть бинарными. Эти операции используются с операндами любого числового типа (целого, вещественного, комплексного).

# Операции умножения * и обычного деления /
# 1. Для целых чисел
a = 7
b = 4
c = a*b # c = 28 - целый результат
d = a/b # d = 1.75 - вещественный результат

# 2. Для вещественных чисел
a = 7.5
b = 3.2
c = a*b # c = 24.0 - вещественный результат
d = a/b # d = 2.34375

# 3. Для комплексных чисел
x = 2 + 2j
y = 3 - 1j
z = x*y # z = (8+4j)
v = x/y # v = (0.4+0.7999999999999999j)

# 4. В 16-й системе исчисления
a = 0xaff
b = 0x5b
c = a*b # c = 256165 - результат в 10-й системи исчисления
d = a/b # d = 30.934065934065934 - вещественное число

# 5. В 8-й системе исчисления
a = 0o356
b = 0o2
c = a*b # c = 476
d = a/b # d = 119.0

# 6. В 2-й системе исчисления
a = 0b111 # a = 35
b = 0b101 # b = 5
c = a*b # c = 35 - результат в 10-й системе исчисления
d = a/b # d = 1.4 - результат в 2-й системе исчисления
 
 
bool
Boolean value
>>> flag = True
int
Integer number
>>> counter = 12
float
Floating-point number
>>> price = 12.5
list
Mutable sequence of objects
>>> simpleList = [‘hello’, 3, ‘Python’, 3.8, True]
tuple
Immutable sequence of objects
>>> simpleTuble = (‘hello’, 3, ‘Python’, 3.8, True)
str
Character string
>>> sentence = “I like Python!”
set
Unordered set of distinct objects
>>> simpleSet = set(‘Hello Python’)
>>> difficultSet = {“Hello’, ‘ ‘, ‘Python’}
dict
Associative mapping (dictionary)
>>> simpleDict = {‘language’ : ‘Python’, ‘count’ : 3}

Immutable
>>> tupleFirst = (‘I’, ‘like’)
>>> tupleSecond = tupleFirst
>>> tupleFirst += (‘Python’, ‘!’)
>>> tupleFirst
(‘I’, ‘like’, ‘Python’, ‘!’)
>>> tupleSecond
(‘I’, ‘like’)

Mutable
>>> listFirst = [‘I’, ‘like’]
>>> listSecond = listFirst
>>> listFirst += [‘Python’, ‘!’]
>>> listFirst
[‘I’, ‘like’, ‘Python’]
>>> listSecond
[‘I’, ‘like’, ‘Python’, ‘!’]

